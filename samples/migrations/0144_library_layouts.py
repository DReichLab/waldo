# Generated by Django 3.0.4 on 2021-12-03 16:12

from django.db import migrations

def row_column(position_string):
	if len(position_string) > 0:
		row = position_string[0]
		column = int(position_string[1:])
	else:
		row = None
		column = None
	return row, column

def create_library_layouts(apps, queryset):
	EXTRACT_NEGATIVE = 'Extract Negative'
	LIBRARY_NEGATIVE = 'Library Negative'
	
	LibraryBatch = apps.get_model('samples', 'LibraryBatch')
	Library = apps.get_model('samples', 'Library')
	LibraryBatchLayout = apps.get_model('samples', 'LibraryBatchLayout')
	ControlType = apps.get_model('samples', 'ControlType')
	
	for library_batch in LibraryBatch.objects.all():
		for library in Library.objects.filter(library_batch=library_batch):
			control_type = None
			if 'Library_Control' == library.alt_category:
				control_type = ControlType.objects.get(control_type=LIBRARY_NEGATIVE)
			elif 'Extract_Control' == library.alt_category:
				control_type = ControlType.objects.get(control_type=EXTRACT_NEGATIVE)

			layout_element, created = LibraryBatchLayout.objects.get_or_create(
				library_batch=library_batch,
				extract = library.extract,
				library = library,
				)
			if not created:
				raise ValueError(f'unexpected existing layout element for {library.reich_lab_id}')
				
			row, column = row_column(library.position)
				
			layout_element.control_type = control_type
			layout_element.ul_extract_used = library.ul_extract_used
			layout_element.row = row
			layout_element.column = column
			layout_element.save()

class Migration(migrations.Migration):

    dependencies = [
        ('samples', '0143_powder_batch_date_help'),
    ]

    operations = [
		migrations.RunPython(create_library_layouts),
    ]
