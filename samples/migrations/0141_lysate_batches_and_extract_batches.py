# Generated by Django 3.0.4 on 2021-12-02 02:14

from django.db import migrations

EXTRACT_NEGATIVE = 'Extract Negative'
LIBRARY_NEGATIVE = 'Library Negative'

def row_column(position_string):
	if len(position_string) > 0:
		row = position_string[0]
		column = int(position_string[1:])
	else:
		row = None
		column = None
	return row, column

# return control type for the extract if there is one
def control_type_from_extract_id(apps, extract_id):
	Extract = apps.get_model('samples', 'Extract')
	Library = apps.get_model('samples', 'Library')
	ControlType = apps.get_model('samples', 'ControlType')
	
	extract = Extract.objects.get(id=extract_id)
	libraries = Library.objects.filter(extract=extract)
	
	last_library = None
	alt_category = None
	for library in libraries:
		if alt_category is not None and alt_category != library.alt_category:
			raise ValueError(f'library alt category mismatch {last_library} {alt_category}; {library.reich_lab_library_id} {library.alt_category}')
			#print(f'FIX library alt category mismatch {last_library} {alt_category}; {library.reich_lab_library_id} {library.alt_category}')
		last_library = library.reich_lab_library_id
		alt_category = library.alt_category
	
	control_type = None
	if 'Library_Control' == alt_category:
		control_type = ControlType.objects.get(control_type=LIBRARY_NEGATIVE)
	elif 'Extract_Control' == alt_category:
		control_type = ControlType.objects.get(control_type=EXTRACT_NEGATIVE)
		is_first = False
	return control_type
	
def control_type_from_lysate_id(apps, lysate_id):
	Lysate = apps.get_model('samples', 'Lysate')
	Extract = apps.get_model('samples', 'Extract')
	ExtractionBatchLayout = apps.get_model('samples', 'ExtractionBatchLayout')
	
	lysate = Lysate.objects.get(id=lysate_id)
	layout_elements = ExtractionBatchLayout.objects.filter(lysate=lysate)
	
	first = True
	for layout_element in layout_elements:
		if first:
			last = layout_element.control_type
		else:
			if last != layout_element.control_type:
				raise ValueError(f'multiple control types for {lysate.lysate_id}')
	return last

def create_extraction_batches_and_lysate_and_extract_layouts(apps, queryset):
	Extract = apps.get_model('samples', 'Extract')	
	LysateBatch = apps.get_model('samples', 'LysateBatch')
	ExtractionBatch = apps.get_model('samples', 'ExtractionBatch')
	ExtractionBatchLayout = apps.get_model('samples', 'ExtractionBatchLayout')
	LysateBatchLayout = apps.get_model('samples', 'LysateBatchLayout')
	
	for lysate_batch in LysateBatch.objects.all():
		# create a corresponding extract batch object
		extract_batch, created = ExtractionBatch.objects.get_or_create(
			batch_name = lysate_batch.batch_name, 
			protocol = lysate_batch.protocol, 
			technician = lysate_batch.technician,
			technician_fk = lysate_batch.technician_fk,
			date = lysate_batch.date,
			robot = lysate_batch.robot,
			note = lysate_batch.note,
			control_set = lysate_batch.control_set,
			)
		
		# the old extract batch objects were renamed to lysate batches
		# attach the extracts to the newly created extract batch
		for extract in Extract.objects.filter(lysate_batch=lysate_batch):
			lysate = extract.lysate
			row = None
			column = None
			if lysate:
				lysate.lysate_batch = extract.lysate_batch
				lysate.save()
				
				# lysate batch layout elements do not exist yet. Get position from Lysate object position string
				row, column = row_column(lysate.position)
			
			control_type = control_type_from_extract_id(apps, extract.id)
			extract_layout_element, created = ExtractionBatchLayout.objects.get_or_create(extract_batch=extract_batch,
				lysate = extract.lysate,
				control_type = control_type,
				lysate_volume_used = extract.lysis_volume_extracted,
				extract = extract,
				row = row,
				column = column
			)
			
			extract.extract_batch = extract_batch
			extract.save()
			
		for lysate in lysate_batch.lysate_set.all():
			control_type = control_type_from_lysate_id(apps, lysate.id)
			well_position_str = lysate.position
			row, column = row_column(well_position_str)
			LysateBatchLayout.objects.get_or_create(lysate_batch=lysate_batch, powder_sample=lysate.powder_sample, lysate=lysate, control_type=control_type, powder_used_mg=lysate.powder_used_mg, row=row, column=column)

class Migration(migrations.Migration):

    dependencies = [
        ('samples', '0140_null_layout_amounts'),
    ]

    operations = [
		migrations.RunPython(create_extraction_batches_and_lysate_and_extract_layouts),
    ]
