# Generated by Django 3.0.4 on 2022-07-07 14:32

from django.db import migrations

CAPTURE_POSITIVE_LIBRARY_NAME_DS = 'capture_positive_ds'

def create_library_for_capture_positive(apps, queryset):
	Library = apps.get_model('samples', 'Library')
	Barcode = apps.get_model('samples', 'Barcode')
	try:
		b2_barcode = Barcode.objects.get(sequence='TTACAGT')
	except Barcode.DoesNotExist:
		b2_barcode = None
	try:
		d2_barcode = Barcode.objects.get(sequence='CCGTGAC')
	except Barcode.DoesNotExist:
		d2_barcode = None
	
	Library.objects.get_or_create(
		reich_lab_library_id=CAPTURE_POSITIVE_LIBRARY_NAME_DS,
		udg_treatment = 'partial',
		p5_barcode = b2_barcode,
		p7_barcode = d2_barcode,
		notes='Capture positive',
		library_type='ds',
		)
	
def delete_capture_positive_library(apps, queryset):
	Library = apps.get_model('samples', 'Library')
	
	try:
		capture_positive = Library.objects.get(reich_lab_library_id=CAPTURE_POSITIVE_LIBRARY_NAME_DS)
		capture_positive.delete()
	except Library.DoesNotExist:
		pass # already deleted
		
def backfill_capture_positive_barcodes_ds(apps, queryset):
	CaptureLayout = apps.get_model('samples', 'CaptureLayout')
	Library = apps.get_model('samples', 'Library')
	
	capture_positive_library = Library.objects.get(reich_lab_library_id=CAPTURE_POSITIVE_LIBRARY_NAME_DS)
	
	capture_positives = CaptureLayout.objects.filter(control_type__control_type='Capture Positive')
	for capture_positive in capture_positives:
		if capture_positive.library is not None:
			raise NotImplementedError()
		print(capture_positive.capture_batch.name)
		capture_positive.library = capture_positive_library
		capture_positive.save()
		
def clear_capture_positive_libraries(apps, queryset):
	CaptureLayout = apps.get_model('samples', 'CaptureLayout')
	
	capture_positives = CaptureLayout.objects.filter(control_type__control_type='Capture Positive')
	for capture_positive in capture_positives:
		capture_positive.library = None
		capture_positive.save()

class Migration(migrations.Migration):

	dependencies = [
		('samples', '0156_batch_rotation'),
	]

	operations = [
		migrations.RunPython(create_library_for_capture_positive, delete_capture_positive_library),
		migrations.RunPython(backfill_capture_positive_barcodes_ds, clear_capture_positive_libraries),
	]
