# Generated by Django 3.0.4 on 2021-10-29 22:03

from django.db import migrations

def do_nothing(apps, schema_editor):
	pass
	
#choose non-empty fields, raise error if non-empty mismatch
def pick_best(existing, candidate):
	if existing is None or (isinstance(existing, str) and len(existing) == 0):
		return candidate
	elif candidate is not None:
		if isinstance(candidate, str):
			if len(candidate) > 0 and existing != candidate:
				raise ValueError(f'mismatch\texisting: "{existing}"\tcandidate: "{candidate}"')
		elif existing != candidate:
			raise ValueError(f'mismatch\texisting: "{existing}"\tcandidate: "{candidate}"')
	return existing

def populate_sequencing_runs(apps, source_type, destination_type, use_timestamps=False):
	source_model = apps.get_model('samples', source_type)
	destination_model = apps.get_model('samples', destination_type)
	for source in source_model.objects.all().order_by('date'):
		destination, created = destination_model.objects.get_or_create(name = source.name)
		
		destination.technician = pick_best(destination.technician, source.technician)
		destination.technician_fk = pick_best(destination.technician_fk, source.technician_fk)
		if destination.date is None:
			destination.date = source.date
		destination.sequencing = pick_best(destination.sequencing, source.sequencing)
		destination.notes = pick_best(destination.notes, source.notes)
		
		if use_timestamps:
			destination.creation_timestamp = source.creation_timestamp
			destination.created_by = source.created_by
			destination.modification_timestamp = source.modification_timestamp
			destination.modified_by = source.modified_by
		destination.save()

def repopulate_separate_sequencing_runs(apps, schema_editor):
	populate_sequencing_runs(apps, 'SequencingRun', 'NuclearSequencingRun', True)
	populate_sequencing_runs(apps, 'SequencingRun', 'MTSequencingRun', True)
	populate_sequencing_runs(apps, 'SequencingRun', 'ShotgunSequencingRun', True)

class Migration(migrations.Migration):

    dependencies = [
        ('samples', '0087_reverse_separate_reference'),
    ]

    operations = [
		migrations.RunPython(do_nothing, repopulate_separate_sequencing_runs),
    ]
